const express = require('express');
const router = express.Router();
const initDB = require('../db');

// üìå R√©cup√©rer tous les produits
router.get('/', async (req, res) => {
    const connection = await initDB();
    try {
        const [result] = await connection.query("CALL GetAllProducts()");
        res.json(result[0]); // Les r√©sultats des proc√©dures stock√©es sont dans un tableau
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des produits." });
    } finally {
        connection.end();
    }
});

// üìå R√©cup√©rer un produit par ID
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    if (!id || isNaN(id)) return res.status(400).json({ error: "ID valide requis" });

    const connection = await initDB();
    try {
        const [result] = await connection.query("CALL GetProductById(?)", [id]);
        res.json(result[0]);
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration du produit." });
    } finally {
        connection.end();
    }
});

// üìå Ajouter un produit avec validation des entr√©es
router.post('/', async (req, res) => {
    const { nom, prix, quantite, categorie_id } = req.body;
    if (!nom || prix == null || quantite == null || !categorie_id) {
        return res.status(400).json({ error: "Tous les champs sont requis" });
    }
    if (prix < 0 || quantite < 0) {
        return res.status(400).json({ error: "Prix et quantit√© doivent √™tre positifs" });
    }

    const connection = await initDB();
    try {
        await connection.query("CALL AddProduct(?, ?, ?, ?)", [nom, prix, quantite, categorie_id]);
        res.status(201).json({ message: "Produit ajout√© avec succ√®s" });
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de l'ajout du produit." });
    } finally {
        connection.end();
    }
});

// üìå Mettre √† jour un produit avec validation
router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const { nom, prix, quantite, categorie_id } = req.body;

    if (!id || isNaN(id)) return res.status(400).json({ error: "ID valide requis" });
    if (!nom || prix == null || quantite == null || !categorie_id) {
        return res.status(400).json({ error: "Tous les champs sont requis" });
    }
    if (prix < 0 || quantite < 0) {
        return res.status(400).json({ error: "Prix et quantit√© doivent √™tre positifs" });
    }

    const connection = await initDB();
    try {
        await connection.query("CALL UpdateProduct(?, ?, ?, ?, ?)", [id, nom, prix, quantite, categorie_id]);
        res.json({ message: "Produit mis √† jour avec succ√®s" });
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la mise √† jour du produit." });
    } finally {
        connection.end();
    }
});

// üìå Supprimer un produit (bloqu√© si r√©f√©renc√© dans une commande)
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    if (!id || isNaN(id)) return res.status(400).json({ error: "ID valide requis" });

    const connection = await initDB();
    try {
        await connection.query("CALL DeleteProduct(?)", [id]);
        res.json({ message: "Produit supprim√© avec succ√®s" });
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la suppression du produit. V√©rifiez s'il est r√©f√©renc√© dans une commande." });
    } finally {
        connection.end();
    }
});

module.exports = router;
